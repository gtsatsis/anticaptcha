package anticaptcha

import (
	"encoding/json"
	"errors"
)

// TaskType is an enum containing valid types for a Task.
type TaskType string

const (
	TaskTypeImageToText                    TaskType = "ImageToTextTask"
	TaskTypeRecaptchaV2Proxyless           TaskType = "RecaptchaV2TaskProxyless"
	TaskTypeRecaptchaV2EnterpriseProxyless TaskType = "RecaptchaV2EnterpriseTaskProxyless"
	TaskTypeRecaptchaV3Proxyless           TaskType = "RecaptchaV3TaskProxyless"
	TaskTypeFuncaptchaProxyless            TaskType = "FuncaptchaTaskProxyless"
	TaskTypeHCaptchaProxyless              TaskType = "HCaptchaTaskProxyless"
)

type TaskStatus string

const (
	TaskStatusNotSubmitted TaskStatus = "NotSubmitted"
	TaskStatusProcessing   TaskStatus = "processing"
	TaskStatusReady        TaskStatus = "ready"
)

// TaskNumericFlag is an int-flag used in ImageToTextTask that defines the requirements for a solution.
//
// TaskNumericFlagAll 				(0): No specific requirements.
// TaskNumericFlagNumbersOnly 		(1): The answer can only contain numbers.
// TaskNumericFlagNumbersExcluded 	(2): The answer cannot contain numbers.
type TaskNumericFlag int

const (
	TaskNumericFlagAll             TaskNumericFlag = 0
	TaskNumericFlagNumbersOnly     TaskNumericFlag = 1
	TaskNumericFlagNumbersExcluded TaskNumericFlag = 2
)

// Task is the root struct used for submitting tasks to Anti-Captcha.
type Task struct {
	api         *Api        // api is the Api used for this Task.
	ID          int         // ID is the task identifier generated by Anti-Captcha
	Type        TaskType    // Type is the TaskType of the Task.
	Parameters  interface{} // Parameters is a struct of task parameters (e.g.: ImageToTextTask, RecaptchaV2TaskProxyless)
	Status      TaskStatus  // Status is the current TaskStatus of the Task.
	lastChecked int64       // lastChecked is an internal variable to store the UNIX timestamp of the last check. Used for GetStatus.
}

// NewTask creates a new Task object.
func NewTask(api *Api, t TaskType, parameters interface{}) *Task {
	return &Task{
		api:        api,
		Type:       t,
		Parameters: parameters,
	}
}

func (t *Task) GetJson() (map[string]interface{}, error) {
	// HACK: Marshalling the struct & then unmarshalling into a map[string]interface{} shouldn't have to be done, but it is, because I have no clue on how to do this rn.
	var j map[string]interface{}

	b, err := json.Marshal(t.Parameters)
	if err != nil {
		return nil, err
	}

	err = json.Unmarshal(b, &j)
	if err != nil {
		return nil, err
	}

	return j, nil
}

// Submit submits the Task to Anti-Captcha.
func (t *Task) Submit() error {
	return t.api.SubmitTask(t)
}

func (t *Task) GetStatus() (string, error) {
	return t.api.GetTaskStatus(t)
}

// ImageToTextTask is a captcha solving Task that takes an image and returns the text contained in it.
// See: https://anti-captcha.com/apidoc/task-types/ImageToTextTask
type ImageToTextTask struct {
	Body          string          `json:"body"`      // Body is the base64-encoded image data, exclusive of tags such as "data:image/png".
	Phrase        bool            `json:"phrase"`    // Phrase is a flag that marks the Task as requiring at least one space. If there are none, it is skipped.
	CaseSensitive bool            `json:"case"`      // CaseSensitive is a flag that marks the Task as case-sensitive.
	Numeric       TaskNumericFlag `json:"numeric"`   // Numeric is a TaskNumericFlag that is used to define the requirements for the solution.
	Math          bool            `json:"math"`      // Math is a flag that marks the Task as a mathematical problem that requires calculation.
	MinLength     int             `json:"minLength"` // MinLength is a flag that marks the minimum length of a solution. 0 means unlimited.
	MaxLength     int             `json:"maxLength"` // MaxLength is a flag that marks the maximum length of a solution. 0 means unlimited.
}

// NewImageToTextTask creates a new ImageToTextTask.
func NewImageToTextTask(body string, isPhrase bool, isCaseSensitive bool, numericFlag TaskNumericFlag, isMath bool, minLength int, maxLength int) (*ImageToTextTask, error) {
	return &ImageToTextTask{
		Body:          body,
		Phrase:        isPhrase,
		CaseSensitive: isCaseSensitive,
		Numeric:       numericFlag,
		Math:          isMath,
		MinLength:     minLength,
		MaxLength:     maxLength,
	}, nil
}

// ToTask creates a new Task object from a ImageToTextTask.
func (t *ImageToTextTask) ToTask(a *Api) *Task {
	return NewTask(a, TaskTypeImageToText, t)
}

// RecaptchaV2TaskProxyless is a captcha solving Task aimed at ReCaptcha V2.
// See: https://anti-captcha.com/apidoc/task-types/RecaptchaV2TaskProxyless
type RecaptchaV2TaskProxyless struct {
	WebsiteUrl  string `json:"websiteURL"`                    // WebsiteUrl is the url of the page the ReCaptcha task is in.
	WebsiteKey  string `json:"websiteKey"`                    // WebsiteKey is the ReCaptcha key used by the page.
	DataSValue  string `json:"recaptchaDataSValue,omitempty"` // DataSValue is the value of the `data-s` field (only present on Google sites)
	IsInvisible bool   `json:"isInvisible"`                   // IsInvisible is a flag indicating whether the ReCaptcha is invisible or not.
}

// NewRecaptchaV2TaskProxyless creates a new RecaptchaV2TaskProxyless.
func NewRecaptchaV2TaskProxyless(websiteUrl string, websiteKey string, dataSValue string, isInvisible bool) (*RecaptchaV2TaskProxyless, error) {
	return &RecaptchaV2TaskProxyless{
		WebsiteUrl:  websiteUrl,
		WebsiteKey:  websiteKey,
		DataSValue:  dataSValue,
		IsInvisible: isInvisible,
	}, nil
}

// ToTask creates a new Task object from a RecaptchaV2TaskProxyless.
func (t *RecaptchaV2TaskProxyless) ToTask(a *Api) *Task {
	return NewTask(a, TaskTypeRecaptchaV2Proxyless, t)
}

// RecaptchaV2EnterpriseTaskProxyless is a captcha solving Task aimed at ReCaptcha V2.
// See: https://anti-captcha.com/apidoc/task-types/RecaptchaV2EnterpriseTaskProxyless
type RecaptchaV2EnterpriseTaskProxyless struct {
	WebsiteUrl        string                  `json:"websiteURL"`                  // WebsiteUrl is the url of the page the ReCaptcha task is in.
	WebsiteKey        string                  `json:"websiteKey"`                  // WebsiteKey is the ReCaptcha key used by the page.
	EnterprisePayload *map[string]interface{} `json:"enterprisePayload,omitempty"` // EnterprisePayload is the additional parameters present in the ReCaptcha widget.
	ApiDomain         string                  `json:"apiDomain,omitempty"`         // ApiDomain is the domain the ReCaptcha script should be served from. Do not use unless you know what you're doing.
}

// NewRecaptchaV2EnterpriseTaskProxyless creates a new RecaptchaV2EnterpriseTaskProxyless.
func NewRecaptchaV2EnterpriseTaskProxyless(websiteUrl string, websiteKey string, enterprisePayload *map[string]interface{}, apiDomain string) (*RecaptchaV2EnterpriseTaskProxyless, error) {
	if apiDomain != "" && (apiDomain != "www.google.com" && apiDomain != "www.recaptcha.net") {
		return nil, errors.New("api domain was an allowed value")
	}

	return &RecaptchaV2EnterpriseTaskProxyless{
		WebsiteUrl:        websiteUrl,
		WebsiteKey:        websiteKey,
		EnterprisePayload: enterprisePayload,
		ApiDomain:         apiDomain,
	}, nil
}

// ToTask creates a new Task object from a RecaptchaV2TaskProxyless.
func (t *RecaptchaV2EnterpriseTaskProxyless) ToTask(a *Api) *Task {
	return NewTask(a, TaskTypeRecaptchaV2EnterpriseProxyless, t)
}

// RecaptchaV3TaskProxyless is a captcha solving Task aimed at ReCaptcha V3.
// See: https://anti-captcha.com/apidoc/task-types/RecaptchaV3TaskProxyless
type RecaptchaV3TaskProxyless struct {
	WebsiteUrl   string  `json:"websiteURL"`             // WebsiteUrl is the url of the page the ReCaptcha task is in.
	WebsiteKey   string  `json:"websiteKey"`             // WebsiteKey is the ReCaptcha key used by the page.
	MinScore     float64 `json:"minScore"`               // MinScore is the minimum ReCaptcha score of the worker to be assigned to the Task. Valid values: 0.3, 0.7, 0.9.
	PageAction   string  `json:"pageAction,omitempty"`   // PageAction is the ReCaptcha `action` value.
	IsEnterprise bool    `json:"isEnterprise,omitempty"` // IsEnterprise is a flag indicating whether the ReCaptcha is being solved using the Enterprise API.
	ApiDomain    string  `json:"apiDomain,omitempty"`    // ApiDomain is the domain the ReCaptcha script should be served from. Do not use unless you know what you're doing.
}

// NewRecaptchaV3TaskProxyless creates a new RecaptchaV3TaskProxyless.
func NewRecaptchaV3TaskProxyless(websiteUrl string, websiteKey string, minScore float64, pageAction string, isEnterprise bool, apiDomain string) (*RecaptchaV3TaskProxyless, error) {
	if minScore != 0.3 && minScore != 0.7 && minScore != 0.9 {
		return nil, errors.New("minimum score not in allowed range")
	}

	if apiDomain != "" && (apiDomain != "www.google.com" && apiDomain != "www.recaptcha.net") {
		return nil, errors.New("api domain was not an allowed value")
	}

	return &RecaptchaV3TaskProxyless{
		WebsiteUrl:   websiteUrl,
		WebsiteKey:   websiteKey,
		MinScore:     minScore,
		PageAction:   pageAction,
		IsEnterprise: isEnterprise,
		ApiDomain:    apiDomain,
	}, nil
}

// ToTask creates a new Task object from a RecaptchaV3TaskProxyless.
func (t *RecaptchaV3TaskProxyless) ToTask(a *Api) *Task {
	return NewTask(a, TaskTypeRecaptchaV3Proxyless, t)
}

// FuncaptchaTaskProxyless is a captcha solving Task aimed at Funcaptcha (Arkose Labs).
// See: https://anti-captcha.com/apidoc/task-types/FunCaptchaTaskProxyless
type FuncaptchaTaskProxyless struct {
	WebsiteUrl       string `json:"websiteURL"`
	WebsitePublicKey string `json:"websitePublicKey"`
	ApiJsSubdomain   string `json:"funcaptchaApiJSSubdomain,omitempty"`
	Data             string `json:"data,omitempty"`
}

func NewFuncaptchaTaskProxyless(websiteUrl string, websitePublicKey string, apiJsSubdomain string, data string) (*FuncaptchaTaskProxyless, error) {
	return &FuncaptchaTaskProxyless{
		WebsiteUrl:       websiteUrl,
		WebsitePublicKey: websitePublicKey,
		ApiJsSubdomain:   apiJsSubdomain,
		Data:             data,
	}, nil
}

// ToTask creates a new Task object from a FuncaptchaTaskProxyless.
func (t *FuncaptchaTaskProxyless) ToTask(a *Api) *Task {
	return NewTask(a, TaskTypeFuncaptchaProxyless, t)
}

// HCaptchaTaskProxyless is a captcha solving Task aimed at hCaptcha.
// See: https://anti-captcha.com/apidoc/task-types/HCaptchaTaskProxyless
type HCaptchaTaskProxyless struct {
	WebsiteUrl string `json:"websiteURL"`
	WebsiteKey string `json:"websiteKey"`
}

func NewHCaptchaTaskProxyless(websiteUrl string, websiteKey string) (*HCaptchaTaskProxyless, error) {
	return &HCaptchaTaskProxyless{
		WebsiteUrl: websiteUrl,
		WebsiteKey: websiteKey,
	}, nil
}

// ToTask creates a new Task object from a HCaptchaTaskProxyless.
func (t *HCaptchaTaskProxyless) ToTask(a *Api) *Task {
	return NewTask(a, TaskTypeHCaptchaProxyless, t)
}
